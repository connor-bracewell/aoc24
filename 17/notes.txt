The program is 2,4,1,3,7,5,0,3,1,5,4,1,5,5,3,0

As instructions:
2 4 | bst A | b = a%4 = a&3
1 3 | bxl 3 | b = b^011 = (a&3)^011
7 5 | cdv B | c = a>>b = a>>((a&3)^011)
0 3 | adv 3 | a = a>>3
1 5 | bxl 5 | b = b^101 = (a&3)^011^101 = (a&3)^110
4 1 | bxc _ | b = b^c = (a&3)^110^(a>>((a&3)^011))
5 5 | out B | b%4->out
3 0 = jnz -> goto 0 if a !=0 else terminate

As pseudocode:
while a != 0:
  b = a%4   # bottom 3 bits of A
  b = b^011 # (bottom 3 bits of A)^011
  c = a>>b  # A shifted by some amount
  a = a>>3  # drop the bottom 3 bits
  b = b^101 # (old bottom 3 bits of A)^110
  b = b^c   # (A shifted by some amount)^(old bottom 3 bits of A)^110
  out(b%4)

tl;dr: Let D be the bottom 3 bits of A. Output D^110^(A>>(D^011)). Then shift A right by 3 bits, and repeat if A is not 0.

Checking the original output:
63687530 -> 11110010111100101101101010 -> [011 110 010 111 100 101 101 101 010]
The output is 1,6,7,4,3,0,5,0,6 which has 9 digits corresponding to the 9 3-bit groups as expected.
Group 1: d=010, d^011=001, a>>001=101, final output is 010^110^101 = 001 = 1, as expected.
Group 2: d=101, d^011=110, a>>110=101, final output is 101^110^101 = 110 = 6, as expected.
... and so on, presumably. 

We want output 2,4,1,3,7,5,0,3,1,5,4,1,5,5,3,0 which is 16 digits, so we want a 48 digit binary string.

Working forwards is complicated since we might "shift in" unknown bits. Start at the end and work backwards instead.

We want the prefixes of A to give output: 0,3,5,5,1,4,5,1,3,0,5,7,4,1,4,2
